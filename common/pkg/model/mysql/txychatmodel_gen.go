// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	txyChatFieldNames          = builder.RawFieldNames(&TxyChat{})
	txyChatRows                = strings.Join(txyChatFieldNames, ",")
	txyChatRowsExpectAutoSet   = strings.Join(stringx.Remove(txyChatFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	txyChatRowsWithPlaceHolder = strings.Join(stringx.Remove(txyChatFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	txyChatModel interface {
		Insert(ctx context.Context, data *TxyChat) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TxyChat, error)
		Update(ctx context.Context, data *TxyChat) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTxyChatModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TxyChat struct {
		Id        int64  `db:"id"`
		Cid       uint64 `db:"cid"`
		Title     string `db:"title"`
		Ctime     int64  `db:"ctime"`   // 创建时间
		Content   string `db:"content"` // 内容
		ViewCount uint64 `db:"view_count"`
		Status    int64  `db:"status"` // 状态
		IsDelete  uint64 `db:"is_delete"`
	}
)

func newTxyChatModel(conn sqlx.SqlConn) *defaultTxyChatModel {
	return &defaultTxyChatModel{
		conn:  conn,
		table: "`txy_chat`",
	}
}

func (m *defaultTxyChatModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTxyChatModel) FindOne(ctx context.Context, id int64) (*TxyChat, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", txyChatRows, m.table)
	var resp TxyChat
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTxyChatModel) Insert(ctx context.Context, data *TxyChat) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, txyChatRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Cid, data.Title, data.Ctime, data.Content, data.ViewCount, data.Status, data.IsDelete)
	return ret, err
}

func (m *defaultTxyChatModel) Update(ctx context.Context, data *TxyChat) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, txyChatRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Cid, data.Title, data.Ctime, data.Content, data.ViewCount, data.Status, data.IsDelete, data.Id)
	return err
}

func (m *defaultTxyChatModel) tableName() string {
	return m.table
}
