// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	txyRolesFieldNames          = builder.RawFieldNames(&TxyRoles{})
	txyRolesRows                = strings.Join(txyRolesFieldNames, ",")
	txyRolesRowsExpectAutoSet   = strings.Join(stringx.Remove(txyRolesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	txyRolesRowsWithPlaceHolder = strings.Join(stringx.Remove(txyRolesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	txyRolesModel interface {
		Insert(ctx context.Context, data *TxyRoles) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*TxyRoles, error)
		Update(ctx context.Context, data *TxyRoles) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultTxyRolesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TxyRoles struct {
		Id          uint64       `db:"id"`          // 主键id
		Name        string       `db:"name"`        // 角色名称
		Description string       `db:"description"` // 描述
		Status      int64        `db:"status"`      // 状态：1启用0禁用
		Key         string       `db:"key"`         // 标识
		CreatedAt   sql.NullTime `db:"created_at"`  // 创建时间
		UpdatedAt   sql.NullTime `db:"updated_at"`  // 更新时间
		DeletedAt   sql.NullTime `db:"deleted_at"`  // 删除时间
	}
)

func newTxyRolesModel(conn sqlx.SqlConn) *defaultTxyRolesModel {
	return &defaultTxyRolesModel{
		conn:  conn,
		table: "`txy_roles`",
	}
}

func (m *defaultTxyRolesModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTxyRolesModel) FindOne(ctx context.Context, id uint64) (*TxyRoles, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", txyRolesRows, m.table)
	var resp TxyRoles
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTxyRolesModel) Insert(ctx context.Context, data *TxyRoles) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, txyRolesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Description, data.Status, data.Key, data.DeletedAt)
	return ret, err
}

func (m *defaultTxyRolesModel) Update(ctx context.Context, data *TxyRoles) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, txyRolesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Description, data.Status, data.Key, data.DeletedAt, data.Id)
	return err
}

func (m *defaultTxyRolesModel) tableName() string {
	return m.table
}
