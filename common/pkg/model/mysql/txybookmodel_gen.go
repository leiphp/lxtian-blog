// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	txyBookFieldNames          = builder.RawFieldNames(&TxyBook{})
	txyBookRows                = strings.Join(txyBookFieldNames, ",")
	txyBookRowsExpectAutoSet   = strings.Join(stringx.Remove(txyBookFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	txyBookRowsWithPlaceHolder = strings.Join(stringx.Remove(txyBookFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	txyBookModel interface {
		Insert(ctx context.Context, data *TxyBook) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*TxyBook, error)
		Update(ctx context.Context, data *TxyBook) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultTxyBookModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TxyBook struct {
		Id          uint64       `db:"id"`          // 主键
		ColumnId    uint64       `db:"column_id"`   // 所属专栏 ID
		Title       string       `db:"title"`       // 标题
		Slug        string       `db:"slug"`        // URL 唯一标识
		Description string       `db:"description"` // 描述
		Cover       string       `db:"cover"`       // 封面
		Author      string       `db:"author"`      // 作者
		Status      int64        `db:"status"`      // 状态
		Click       uint64       `db:"click"`       // 点击数
		CreatedAt   sql.NullTime `db:"created_at"`  // 添加时间
		UpdatedAt   sql.NullTime `db:"updated_at"`  // 修改时间
		DeletedAt   sql.NullTime `db:"deleted_at"`  // 删除时间
	}
)

func newTxyBookModel(conn sqlx.SqlConn) *defaultTxyBookModel {
	return &defaultTxyBookModel{
		conn:  conn,
		table: "`txy_book`",
	}
}

func (m *defaultTxyBookModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTxyBookModel) FindOne(ctx context.Context, id uint64) (*TxyBook, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", txyBookRows, m.table)
	var resp TxyBook
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTxyBookModel) Insert(ctx context.Context, data *TxyBook) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, txyBookRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ColumnId, data.Title, data.Slug, data.Description, data.Cover, data.Author, data.Status, data.Click, data.DeletedAt)
	return ret, err
}

func (m *defaultTxyBookModel) Update(ctx context.Context, data *TxyBook) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, txyBookRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ColumnId, data.Title, data.Slug, data.Description, data.Cover, data.Author, data.Status, data.Click, data.DeletedAt, data.Id)
	return err
}

func (m *defaultTxyBookModel) tableName() string {
	return m.table
}
