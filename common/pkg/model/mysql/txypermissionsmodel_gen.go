// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	txyPermissionsFieldNames          = builder.RawFieldNames(&TxyPermissions{})
	txyPermissionsRows                = strings.Join(txyPermissionsFieldNames, ",")
	txyPermissionsRowsExpectAutoSet   = strings.Join(stringx.Remove(txyPermissionsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	txyPermissionsRowsWithPlaceHolder = strings.Join(stringx.Remove(txyPermissionsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	txyPermissionsModel interface {
		Insert(ctx context.Context, data *TxyPermissions) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*TxyPermissions, error)
		Update(ctx context.Context, data *TxyPermissions) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultTxyPermissionsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TxyPermissions struct {
		Id          uint64       `db:"id"`          // 主键id
		Name        string       `db:"name"`        // 权限名称
		Code        string       `db:"code"`        // 权限标识（如:user:create）
		Type        string       `db:"type"`        // 权限类型：菜单menu,按钮button
		ParentId    int64        `db:"parent_id"`   // 父级id
		MenuId      int64        `db:"menu_id"`     // 菜单id
		Path        string       `db:"path"`        // 路由地址
		Description string       `db:"description"` // 描述
		CreatedAt   sql.NullTime `db:"created_at"`  // 创建时间
		UpdatedAt   sql.NullTime `db:"updated_at"`  // 更新时间
		DeletedAt   sql.NullTime `db:"deleted_at"`  // 删除时间
	}
)

func newTxyPermissionsModel(conn sqlx.SqlConn) *defaultTxyPermissionsModel {
	return &defaultTxyPermissionsModel{
		conn:  conn,
		table: "`txy_permissions`",
	}
}

func (m *defaultTxyPermissionsModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTxyPermissionsModel) FindOne(ctx context.Context, id uint64) (*TxyPermissions, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", txyPermissionsRows, m.table)
	var resp TxyPermissions
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTxyPermissionsModel) Insert(ctx context.Context, data *TxyPermissions) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, txyPermissionsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Code, data.Type, data.ParentId, data.MenuId, data.Path, data.Description, data.DeletedAt)
	return ret, err
}

func (m *defaultTxyPermissionsModel) Update(ctx context.Context, data *TxyPermissions) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, txyPermissionsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Code, data.Type, data.ParentId, data.MenuId, data.Path, data.Description, data.DeletedAt, data.Id)
	return err
}

func (m *defaultTxyPermissionsModel) tableName() string {
	return m.table
}
