// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	txyCommentFieldNames          = builder.RawFieldNames(&TxyComment{})
	txyCommentRows                = strings.Join(txyCommentFieldNames, ",")
	txyCommentRowsExpectAutoSet   = strings.Join(stringx.Remove(txyCommentFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	txyCommentRowsWithPlaceHolder = strings.Join(stringx.Remove(txyCommentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	txyCommentModel interface {
		Insert(ctx context.Context, data *TxyComment) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TxyComment, error)
		Update(ctx context.Context, data *TxyComment) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTxyCommentModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TxyComment struct {
		Id       int64  `db:"id"`
		Link     string `db:"link"`
		Ouid     uint64 `db:"ouid"`      // 评论用户id 关联oauth_user表的id
		Type     uint64 `db:"type"`      // 0：留言评论 1：文章评论 2：素材评论 3：说说评论 4：相片评论
		Pid      uint64 `db:"pid"`       // 父级id
		Aid      uint64 `db:"aid"`       // 文章id
		Content  string `db:"content"`   // 内容
		Ctime    int64  `db:"ctime"`     // 创建时间
		Mtime    int64  `db:"mtime"`     // 修改时间
		Status   uint64 `db:"status"`    // 1:已审核 0：未审核
		IsDelete uint64 `db:"is_delete"` // 是否删除
		City     string `db:"city"`
	}
)

func newTxyCommentModel(conn sqlx.SqlConn) *defaultTxyCommentModel {
	return &defaultTxyCommentModel{
		conn:  conn,
		table: "`txy_comment`",
	}
}

func (m *defaultTxyCommentModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTxyCommentModel) FindOne(ctx context.Context, id int64) (*TxyComment, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", txyCommentRows, m.table)
	var resp TxyComment
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTxyCommentModel) Insert(ctx context.Context, data *TxyComment) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, txyCommentRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Link, data.Ouid, data.Type, data.Pid, data.Aid, data.Content, data.Ctime, data.Mtime, data.Status, data.IsDelete, data.City)
	return ret, err
}

func (m *defaultTxyCommentModel) Update(ctx context.Context, data *TxyComment) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, txyCommentRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Link, data.Ouid, data.Type, data.Pid, data.Aid, data.Content, data.Ctime, data.Mtime, data.Status, data.IsDelete, data.City, data.Id)
	return err
}

func (m *defaultTxyCommentModel) tableName() string {
	return m.table
}
