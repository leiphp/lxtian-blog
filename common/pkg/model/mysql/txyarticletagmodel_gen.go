// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	txyArticleTagFieldNames          = builder.RawFieldNames(&TxyArticleTag{})
	txyArticleTagRows                = strings.Join(txyArticleTagFieldNames, ",")
	txyArticleTagRowsExpectAutoSet   = strings.Join(stringx.Remove(txyArticleTagFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	txyArticleTagRowsWithPlaceHolder = strings.Join(stringx.Remove(txyArticleTagFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	txyArticleTagModel interface {
		Insert(ctx context.Context, data *TxyArticleTag) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*TxyArticleTag, error)
		Update(ctx context.Context, data *TxyArticleTag) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultTxyArticleTagModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TxyArticleTag struct {
		Id  uint64 `db:"id"`
		Aid uint64 `db:"aid"` // 文章id
		Tid uint64 `db:"tid"` // 标签id
	}
)

func newTxyArticleTagModel(conn sqlx.SqlConn) *defaultTxyArticleTagModel {
	return &defaultTxyArticleTagModel{
		conn:  conn,
		table: "`txy_article_tag`",
	}
}

func (m *defaultTxyArticleTagModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTxyArticleTagModel) FindOne(ctx context.Context, id uint64) (*TxyArticleTag, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", txyArticleTagRows, m.table)
	var resp TxyArticleTag
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTxyArticleTagModel) Insert(ctx context.Context, data *TxyArticleTag) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, txyArticleTagRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Aid, data.Tid)
	return ret, err
}

func (m *defaultTxyArticleTagModel) Update(ctx context.Context, data *TxyArticleTag) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, txyArticleTagRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Aid, data.Tid, data.Id)
	return err
}

func (m *defaultTxyArticleTagModel) tableName() string {
	return m.table
}
