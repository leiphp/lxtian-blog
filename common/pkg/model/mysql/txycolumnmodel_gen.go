// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	txyColumnFieldNames          = builder.RawFieldNames(&TxyColumn{})
	txyColumnRows                = strings.Join(txyColumnFieldNames, ",")
	txyColumnRowsExpectAutoSet   = strings.Join(stringx.Remove(txyColumnFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	txyColumnRowsWithPlaceHolder = strings.Join(stringx.Remove(txyColumnFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	txyColumnModel interface {
		Insert(ctx context.Context, data *TxyColumn) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*TxyColumn, error)
		Update(ctx context.Context, data *TxyColumn) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultTxyColumnModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TxyColumn struct {
		Id          uint64       `db:"id"`          // 主键
		Name        string       `db:"name"`        // 专栏名称
		Slug        string       `db:"slug"`        // 唯一标识（URL别名）
		Cover       string       `db:"cover"`       // 封面图 URL
		Description string       `db:"description"` // 专栏描述
		CreatedAt   sql.NullTime `db:"created_at"`  // 创建时间
		UpdatedAt   sql.NullTime `db:"updated_at"`  // 更新时间
	}
)

func newTxyColumnModel(conn sqlx.SqlConn) *defaultTxyColumnModel {
	return &defaultTxyColumnModel{
		conn:  conn,
		table: "`txy_column`",
	}
}

func (m *defaultTxyColumnModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTxyColumnModel) FindOne(ctx context.Context, id uint64) (*TxyColumn, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", txyColumnRows, m.table)
	var resp TxyColumn
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTxyColumnModel) Insert(ctx context.Context, data *TxyColumn) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, txyColumnRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Slug, data.Cover, data.Description)
	return ret, err
}

func (m *defaultTxyColumnModel) Update(ctx context.Context, data *TxyColumn) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, txyColumnRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Slug, data.Cover, data.Description, data.Id)
	return err
}

func (m *defaultTxyColumnModel) tableName() string {
	return m.table
}
