// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	txyArticleFieldNames          = builder.RawFieldNames(&TxyArticle{})
	txyArticleRows                = strings.Join(txyArticleFieldNames, ",")
	txyArticleRowsExpectAutoSet   = strings.Join(stringx.Remove(txyArticleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	txyArticleRowsWithPlaceHolder = strings.Join(stringx.Remove(txyArticleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	txyArticleModel interface {
		Insert(ctx context.Context, data *TxyArticle) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*TxyArticle, error)
		Update(ctx context.Context, data *TxyArticle) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultTxyArticleModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TxyArticle struct {
		Id          uint64       `db:"id"`          // 文章表主键
		Title       string       `db:"title"`       // 标题
		Author      string       `db:"author"`      // 作者
		Content     string       `db:"content"`     // 文章内容
		Keywords    string       `db:"keywords"`    // 关键字
		Path        string       `db:"path"`        // 封面
		Description string       `db:"description"` // 描述
		IsHot       int64        `db:"is_hot"`      // 是否热门
		IsRec       int64        `db:"is_rec"`      // 是否推荐
		Status      int64        `db:"status"`      // 状态
		IsTop       uint64       `db:"is_top"`      // 是否置顶 1是 0否
		IsOriginal  uint64       `db:"is_original"` // 是否原创
		ViewCount   uint64       `db:"view_count"`  // 浏览
		Click       uint64       `db:"click"`       // 点击数
		Cid         uint64       `db:"cid"`         // 分类id
		Tid         string       `db:"tid"`         // 标签id
		Mid         string       `db:"mid"`         // mongodbId
		CreatedAt   sql.NullTime `db:"created_at"`  // 创建时间
		UpdatedAt   sql.NullTime `db:"updated_at"`  // 更新时间
		DeletedAt   sql.NullTime `db:"deleted_at"`  // 删除时间
	}
)

func newTxyArticleModel(conn sqlx.SqlConn) *defaultTxyArticleModel {
	return &defaultTxyArticleModel{
		conn:  conn,
		table: "`txy_article`",
	}
}

func (m *defaultTxyArticleModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTxyArticleModel) FindOne(ctx context.Context, id uint64) (*TxyArticle, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", txyArticleRows, m.table)
	var resp TxyArticle
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTxyArticleModel) Insert(ctx context.Context, data *TxyArticle) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, txyArticleRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Title, data.Author, data.Content, data.Keywords, data.Path, data.Description, data.IsHot, data.IsRec, data.Status, data.IsTop, data.IsOriginal, data.ViewCount, data.Click, data.Cid, data.Tid, data.Mid, data.DeletedAt)
	return ret, err
}

func (m *defaultTxyArticleModel) Update(ctx context.Context, data *TxyArticle) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, txyArticleRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Title, data.Author, data.Content, data.Keywords, data.Path, data.Description, data.IsHot, data.IsRec, data.Status, data.IsTop, data.IsOriginal, data.ViewCount, data.Click, data.Cid, data.Tid, data.Mid, data.DeletedAt, data.Id)
	return err
}

func (m *defaultTxyArticleModel) tableName() string {
	return m.table
}
