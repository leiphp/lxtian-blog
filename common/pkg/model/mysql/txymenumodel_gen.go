// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	txyMenuFieldNames          = builder.RawFieldNames(&TxyMenu{})
	txyMenuRows                = strings.Join(txyMenuFieldNames, ",")
	txyMenuRowsExpectAutoSet   = strings.Join(stringx.Remove(txyMenuFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	txyMenuRowsWithPlaceHolder = strings.Join(stringx.Remove(txyMenuFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	txyMenuModel interface {
		Insert(ctx context.Context, data *TxyMenu) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*TxyMenu, error)
		Update(ctx context.Context, data *TxyMenu) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultTxyMenuModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TxyMenu struct {
		Id        uint64       `db:"id"`         // 主键id
		Title     string       `db:"title"`      // 标题
		Pid       int64        `db:"pid"`        // 父级id
		Index     string       `db:"index"`      // 下标
		Icon      string       `db:"icon"`       // icon
		Permiss   string       `db:"permiss"`    // 标识
		CreatedAt sql.NullTime `db:"created_at"` // 创建时间
		UpdatedAt sql.NullTime `db:"updated_at"` // 更新时间
		DeletedAt sql.NullTime `db:"deleted_at"` // 删除时间
	}
)

func newTxyMenuModel(conn sqlx.SqlConn) *defaultTxyMenuModel {
	return &defaultTxyMenuModel{
		conn:  conn,
		table: "`txy_menu`",
	}
}

func (m *defaultTxyMenuModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTxyMenuModel) FindOne(ctx context.Context, id uint64) (*TxyMenu, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", txyMenuRows, m.table)
	var resp TxyMenu
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTxyMenuModel) Insert(ctx context.Context, data *TxyMenu) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, txyMenuRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Title, data.Pid, data.Index, data.Icon, data.Permiss, data.DeletedAt)
	return ret, err
}

func (m *defaultTxyMenuModel) Update(ctx context.Context, data *TxyMenu) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, txyMenuRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Title, data.Pid, data.Index, data.Icon, data.Permiss, data.DeletedAt, data.Id)
	return err
}

func (m *defaultTxyMenuModel) tableName() string {
	return m.table
}
