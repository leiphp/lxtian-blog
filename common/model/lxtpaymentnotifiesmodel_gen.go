// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	lxtPaymentNotifiesFieldNames          = builder.RawFieldNames(&LxtPaymentNotifies{})
	lxtPaymentNotifiesRows                = strings.Join(lxtPaymentNotifiesFieldNames, ",")
	lxtPaymentNotifiesRowsExpectAutoSet   = strings.Join(stringx.Remove(lxtPaymentNotifiesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	lxtPaymentNotifiesRowsWithPlaceHolder = strings.Join(stringx.Remove(lxtPaymentNotifiesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	lxtPaymentNotifiesModel interface {
		Insert(ctx context.Context, data *LxtPaymentNotifies) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*LxtPaymentNotifies, error)
		FindOneByNotifyId(ctx context.Context, notifyId string) (*LxtPaymentNotifies, error)
		Update(ctx context.Context, data *LxtPaymentNotifies) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultLxtPaymentNotifiesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	LxtPaymentNotifies struct {
		Id            uint64         `db:"id"`             // 主键ID
		NotifyId      string         `db:"notify_id"`      // 通知ID
		PaymentId     string         `db:"payment_id"`     // 支付ID
		NotifyType    string         `db:"notify_type"`    // 通知类型：PAYMENT/REFUND
		NotifyData    string         `db:"notify_data"`    // 通知数据
		Sign          sql.NullString `db:"sign"`           // 签名
		SignType      sql.NullString `db:"sign_type"`      // 签名类型
		VerifyStatus  string         `db:"verify_status"`  // 验证状态
		ProcessStatus string         `db:"process_status"` // 处理状态
		ClientIp      sql.NullString `db:"client_ip"`      // 客户端IP
		ErrorMessage  sql.NullString `db:"error_message"`  // 错误信息
		ProcessedAt   sql.NullTime   `db:"processed_at"`   // 处理时间
		CreatedAt     time.Time      `db:"created_at"`     // 创建时间
		UpdatedAt     time.Time      `db:"updated_at"`     // 更新时间
		DeletedAt     sql.NullTime   `db:"deleted_at"`     // 删除时间
	}
)

func newLxtPaymentNotifiesModel(conn sqlx.SqlConn) *defaultLxtPaymentNotifiesModel {
	return &defaultLxtPaymentNotifiesModel{
		conn:  conn,
		table: "`lxt_payment_notifies`",
	}
}

func (m *defaultLxtPaymentNotifiesModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultLxtPaymentNotifiesModel) FindOne(ctx context.Context, id uint64) (*LxtPaymentNotifies, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", lxtPaymentNotifiesRows, m.table)
	var resp LxtPaymentNotifies
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLxtPaymentNotifiesModel) FindOneByNotifyId(ctx context.Context, notifyId string) (*LxtPaymentNotifies, error) {
	var resp LxtPaymentNotifies
	query := fmt.Sprintf("select %s from %s where `notify_id` = ? limit 1", lxtPaymentNotifiesRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, notifyId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLxtPaymentNotifiesModel) Insert(ctx context.Context, data *LxtPaymentNotifies) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, lxtPaymentNotifiesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.NotifyId, data.PaymentId, data.NotifyType, data.NotifyData, data.Sign, data.SignType, data.VerifyStatus, data.ProcessStatus, data.ClientIp, data.ErrorMessage, data.ProcessedAt, data.DeletedAt)
	return ret, err
}

func (m *defaultLxtPaymentNotifiesModel) Update(ctx context.Context, newData *LxtPaymentNotifies) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, lxtPaymentNotifiesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.NotifyId, newData.PaymentId, newData.NotifyType, newData.NotifyData, newData.Sign, newData.SignType, newData.VerifyStatus, newData.ProcessStatus, newData.ClientIp, newData.ErrorMessage, newData.ProcessedAt, newData.DeletedAt, newData.Id)
	return err
}

func (m *defaultLxtPaymentNotifiesModel) tableName() string {
	return m.table
}
