// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	lxtPaymentConfigsFieldNames          = builder.RawFieldNames(&LxtPaymentConfigs{})
	lxtPaymentConfigsRows                = strings.Join(lxtPaymentConfigsFieldNames, ",")
	lxtPaymentConfigsRowsExpectAutoSet   = strings.Join(stringx.Remove(lxtPaymentConfigsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	lxtPaymentConfigsRowsWithPlaceHolder = strings.Join(stringx.Remove(lxtPaymentConfigsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	lxtPaymentConfigsModel interface {
		Insert(ctx context.Context, data *LxtPaymentConfigs) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*LxtPaymentConfigs, error)
		FindOneByAppId(ctx context.Context, appId string) (*LxtPaymentConfigs, error)
		Update(ctx context.Context, data *LxtPaymentConfigs) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultLxtPaymentConfigsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	LxtPaymentConfigs struct {
		Id              uint64         `db:"id"`                // 主键ID
		AppId           string         `db:"app_id"`            // 应用ID
		AppName         string         `db:"app_name"`          // 应用名称
		AppPrivateKey   string         `db:"app_private_key"`   // 应用私钥
		AlipayPublicKey string         `db:"alipay_public_key"` // 支付宝公钥
		GatewayUrl      string         `db:"gateway_url"`       // 支付宝网关地址
		IsProd          int64          `db:"is_prod"`           // 是否生产环境
		IsEnabled       int64          `db:"is_enabled"`        // 是否启用
		NotifyUrl       sql.NullString `db:"notify_url"`        // 默认通知地址
		ReturnUrl       sql.NullString `db:"return_url"`        // 默认返回地址
		CreatedAt       time.Time      `db:"created_at"`        // 创建时间
		UpdatedAt       time.Time      `db:"updated_at"`        // 更新时间
		DeletedAt       sql.NullTime   `db:"deleted_at"`        // 删除时间
	}
)

func newLxtPaymentConfigsModel(conn sqlx.SqlConn) *defaultLxtPaymentConfigsModel {
	return &defaultLxtPaymentConfigsModel{
		conn:  conn,
		table: "`lxt_payment_configs`",
	}
}

func (m *defaultLxtPaymentConfigsModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultLxtPaymentConfigsModel) FindOne(ctx context.Context, id uint64) (*LxtPaymentConfigs, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", lxtPaymentConfigsRows, m.table)
	var resp LxtPaymentConfigs
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLxtPaymentConfigsModel) FindOneByAppId(ctx context.Context, appId string) (*LxtPaymentConfigs, error) {
	var resp LxtPaymentConfigs
	query := fmt.Sprintf("select %s from %s where `app_id` = ? limit 1", lxtPaymentConfigsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, appId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLxtPaymentConfigsModel) Insert(ctx context.Context, data *LxtPaymentConfigs) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, lxtPaymentConfigsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.AppId, data.AppName, data.AppPrivateKey, data.AlipayPublicKey, data.GatewayUrl, data.IsProd, data.IsEnabled, data.NotifyUrl, data.ReturnUrl, data.DeletedAt)
	return ret, err
}

func (m *defaultLxtPaymentConfigsModel) Update(ctx context.Context, newData *LxtPaymentConfigs) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, lxtPaymentConfigsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.AppId, newData.AppName, newData.AppPrivateKey, newData.AlipayPublicKey, newData.GatewayUrl, newData.IsProd, newData.IsEnabled, newData.NotifyUrl, newData.ReturnUrl, newData.DeletedAt, newData.Id)
	return err
}

func (m *defaultLxtPaymentConfigsModel) tableName() string {
	return m.table
}
