// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	lxtUserMembershipRenewalsFieldNames          = builder.RawFieldNames(&LxtUserMembershipRenewals{})
	lxtUserMembershipRenewalsRows                = strings.Join(lxtUserMembershipRenewalsFieldNames, ",")
	lxtUserMembershipRenewalsRowsExpectAutoSet   = strings.Join(stringx.Remove(lxtUserMembershipRenewalsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	lxtUserMembershipRenewalsRowsWithPlaceHolder = strings.Join(stringx.Remove(lxtUserMembershipRenewalsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	lxtUserMembershipRenewalsModel interface {
		Insert(ctx context.Context, data *LxtUserMembershipRenewals) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*LxtUserMembershipRenewals, error)
		Update(ctx context.Context, data *LxtUserMembershipRenewals) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultLxtUserMembershipRenewalsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	LxtUserMembershipRenewals struct {
		Id                   uint64        `db:"id"`                      // 主键ID
		UserId               uint64        `db:"user_id"`                 // 用户ID
		OrderId              sql.NullInt64 `db:"order_id"`                // 关联订单ID
		FromMembershipTypeId sql.NullInt64 `db:"from_membership_type_id"` // 原会员类型ID（升级时使用）
		ToMembershipTypeId   uint64        `db:"to_membership_type_id"`   // 目标会员类型ID
		RenewalType          int64         `db:"renewal_type"`            // 续费类型：1同级续费2向上升级
		BeforeStartTime      sql.NullTime  `db:"before_start_time"`       // 续费前开始时间
		BeforeEndTime        sql.NullTime  `db:"before_end_time"`         // 续费前结束时间
		AfterStartTime       time.Time     `db:"after_start_time"`        // 续费后开始时间
		AfterEndTime         time.Time     `db:"after_end_time"`          // 续费后结束时间
		RemainingDays        sql.NullInt64 `db:"remaining_days"`          // 剩余天数（升级时计算用）
		CalculatedDays       int64         `db:"calculated_days"`         // 计算后的总天数
		Amount               float64       `db:"amount"`                  // 支付金额
		CreatedAt            time.Time     `db:"created_at"`              // 创建时间
		UpdatedAt            time.Time     `db:"updated_at"`              // 更新时间
		DeletedAt            sql.NullTime  `db:"deleted_at"`              // 删除时间
	}
)

func newLxtUserMembershipRenewalsModel(conn sqlx.SqlConn) *defaultLxtUserMembershipRenewalsModel {
	return &defaultLxtUserMembershipRenewalsModel{
		conn:  conn,
		table: "`lxt_user_membership_renewals`",
	}
}

func (m *defaultLxtUserMembershipRenewalsModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultLxtUserMembershipRenewalsModel) FindOne(ctx context.Context, id uint64) (*LxtUserMembershipRenewals, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", lxtUserMembershipRenewalsRows, m.table)
	var resp LxtUserMembershipRenewals
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLxtUserMembershipRenewalsModel) Insert(ctx context.Context, data *LxtUserMembershipRenewals) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, lxtUserMembershipRenewalsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.OrderId, data.FromMembershipTypeId, data.ToMembershipTypeId, data.RenewalType, data.BeforeStartTime, data.BeforeEndTime, data.AfterStartTime, data.AfterEndTime, data.RemainingDays, data.CalculatedDays, data.Amount, data.DeletedAt)
	return ret, err
}

func (m *defaultLxtUserMembershipRenewalsModel) Update(ctx context.Context, data *LxtUserMembershipRenewals) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, lxtUserMembershipRenewalsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.OrderId, data.FromMembershipTypeId, data.ToMembershipTypeId, data.RenewalType, data.BeforeStartTime, data.BeforeEndTime, data.AfterStartTime, data.AfterEndTime, data.RemainingDays, data.CalculatedDays, data.Amount, data.DeletedAt, data.Id)
	return err
}

func (m *defaultLxtUserMembershipRenewalsModel) tableName() string {
	return m.table
}
