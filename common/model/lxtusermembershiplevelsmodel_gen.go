// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	lxtUserMembershipLevelsFieldNames          = builder.RawFieldNames(&LxtUserMembershipLevels{})
	lxtUserMembershipLevelsRows                = strings.Join(lxtUserMembershipLevelsFieldNames, ",")
	lxtUserMembershipLevelsRowsExpectAutoSet   = strings.Join(stringx.Remove(lxtUserMembershipLevelsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	lxtUserMembershipLevelsRowsWithPlaceHolder = strings.Join(stringx.Remove(lxtUserMembershipLevelsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	lxtUserMembershipLevelsModel interface {
		Insert(ctx context.Context, data *LxtUserMembershipLevels) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*LxtUserMembershipLevels, error)
		Update(ctx context.Context, data *LxtUserMembershipLevels) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultLxtUserMembershipLevelsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	LxtUserMembershipLevels struct {
		Id         uint64         `db:"id"`         // 主键ID
		Level      int64          `db:"level"`      // 等级
		Name       string         `db:"name"`       // 等级名称
		MinDays    int64          `db:"min_days"`   // 最少累计会员天数
		MaxDays    sql.NullInt64  `db:"max_days"`   // 最多累计会员天数（NULL表示无上限）
		Icon       sql.NullString `db:"icon"`       // 等级图标
		Privileges sql.NullString `db:"privileges"` // 等级特权（JSON格式）
		CreatedAt  time.Time      `db:"created_at"` // 创建时间
		UpdatedAt  time.Time      `db:"updated_at"` // 更新时间
		DeletedAt  sql.NullTime   `db:"deleted_at"` // 删除时间
	}
)

func newLxtUserMembershipLevelsModel(conn sqlx.SqlConn) *defaultLxtUserMembershipLevelsModel {
	return &defaultLxtUserMembershipLevelsModel{
		conn:  conn,
		table: "`lxt_user_membership_levels`",
	}
}

func (m *defaultLxtUserMembershipLevelsModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultLxtUserMembershipLevelsModel) FindOne(ctx context.Context, id uint64) (*LxtUserMembershipLevels, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", lxtUserMembershipLevelsRows, m.table)
	var resp LxtUserMembershipLevels
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLxtUserMembershipLevelsModel) Insert(ctx context.Context, data *LxtUserMembershipLevels) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, lxtUserMembershipLevelsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Level, data.Name, data.MinDays, data.MaxDays, data.Icon, data.Privileges, data.DeletedAt)
	return ret, err
}

func (m *defaultLxtUserMembershipLevelsModel) Update(ctx context.Context, data *LxtUserMembershipLevels) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, lxtUserMembershipLevelsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Level, data.Name, data.MinDays, data.MaxDays, data.Icon, data.Privileges, data.DeletedAt, data.Id)
	return err
}

func (m *defaultLxtUserMembershipLevelsModel) tableName() string {
	return m.table
}
