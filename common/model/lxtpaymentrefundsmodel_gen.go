// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	lxtPaymentRefundsFieldNames          = builder.RawFieldNames(&LxtPaymentRefunds{})
	lxtPaymentRefundsRows                = strings.Join(lxtPaymentRefundsFieldNames, ",")
	lxtPaymentRefundsRowsExpectAutoSet   = strings.Join(stringx.Remove(lxtPaymentRefundsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	lxtPaymentRefundsRowsWithPlaceHolder = strings.Join(stringx.Remove(lxtPaymentRefundsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	lxtPaymentRefundsModel interface {
		Insert(ctx context.Context, data *LxtPaymentRefunds) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*LxtPaymentRefunds, error)
		FindOneByOutRequestNo(ctx context.Context, outRequestNo string) (*LxtPaymentRefunds, error)
		FindOneByRefundId(ctx context.Context, refundId string) (*LxtPaymentRefunds, error)
		Update(ctx context.Context, data *LxtPaymentRefunds) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultLxtPaymentRefundsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	LxtPaymentRefunds struct {
		Id           uint64          `db:"id"`             // 主键ID
		RefundId     string          `db:"refund_id"`      // 退款ID
		PaymentId    string          `db:"payment_id"`     // 支付ID
		OrderId      string          `db:"order_id"`       // 订单ID
		OutTradeNo   string          `db:"out_trade_no"`   // 商户订单号
		OutRequestNo string          `db:"out_request_no"` // 退款单号
		UserId       int64           `db:"user_id"`        // 用户ID
		RefundAmount float64         `db:"refund_amount"`  // 退款金额
		RefundFee    sql.NullFloat64 `db:"refund_fee"`     // 退款手续费
		RefundReason sql.NullString  `db:"refund_reason"`  // 退款原因
		Status       string          `db:"status"`         // 退款状态
		RefundStatus sql.NullString  `db:"refund_status"`  // 支付宝退款状态
		GmtRefund    sql.NullTime    `db:"gmt_refund"`     // 退款时间
		CreatedAt    time.Time       `db:"created_at"`     // 创建时间
		UpdatedAt    time.Time       `db:"updated_at"`     // 更新时间
		DeletedAt    sql.NullTime    `db:"deleted_at"`     // 删除时间
	}
)

func newLxtPaymentRefundsModel(conn sqlx.SqlConn) *defaultLxtPaymentRefundsModel {
	return &defaultLxtPaymentRefundsModel{
		conn:  conn,
		table: "`lxt_payment_refunds`",
	}
}

func (m *defaultLxtPaymentRefundsModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultLxtPaymentRefundsModel) FindOne(ctx context.Context, id uint64) (*LxtPaymentRefunds, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", lxtPaymentRefundsRows, m.table)
	var resp LxtPaymentRefunds
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLxtPaymentRefundsModel) FindOneByOutRequestNo(ctx context.Context, outRequestNo string) (*LxtPaymentRefunds, error) {
	var resp LxtPaymentRefunds
	query := fmt.Sprintf("select %s from %s where `out_request_no` = ? limit 1", lxtPaymentRefundsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, outRequestNo)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLxtPaymentRefundsModel) FindOneByRefundId(ctx context.Context, refundId string) (*LxtPaymentRefunds, error) {
	var resp LxtPaymentRefunds
	query := fmt.Sprintf("select %s from %s where `refund_id` = ? limit 1", lxtPaymentRefundsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, refundId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLxtPaymentRefundsModel) Insert(ctx context.Context, data *LxtPaymentRefunds) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, lxtPaymentRefundsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.RefundId, data.PaymentId, data.OrderId, data.OutTradeNo, data.OutRequestNo, data.UserId, data.RefundAmount, data.RefundFee, data.RefundReason, data.Status, data.RefundStatus, data.GmtRefund, data.DeletedAt)
	return ret, err
}

func (m *defaultLxtPaymentRefundsModel) Update(ctx context.Context, newData *LxtPaymentRefunds) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, lxtPaymentRefundsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.RefundId, newData.PaymentId, newData.OrderId, newData.OutTradeNo, newData.OutRequestNo, newData.UserId, newData.RefundAmount, newData.RefundFee, newData.RefundReason, newData.Status, newData.RefundStatus, newData.GmtRefund, newData.DeletedAt, newData.Id)
	return err
}

func (m *defaultLxtPaymentRefundsModel) tableName() string {
	return m.table
}
