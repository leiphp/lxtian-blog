// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	lxtPaymentGoodsFieldNames          = builder.RawFieldNames(&LxtPaymentGoods{})
	lxtPaymentGoodsRows                = strings.Join(lxtPaymentGoodsFieldNames, ",")
	lxtPaymentGoodsRowsExpectAutoSet   = strings.Join(stringx.Remove(lxtPaymentGoodsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	lxtPaymentGoodsRowsWithPlaceHolder = strings.Join(stringx.Remove(lxtPaymentGoodsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	lxtPaymentGoodsModel interface {
		Insert(ctx context.Context, data *LxtPaymentGoods) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*LxtPaymentGoods, error)
		FindOneByCategoryId(ctx context.Context, categoryId int64) (*LxtPaymentGoods, error)
		Update(ctx context.Context, data *LxtPaymentGoods) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultLxtPaymentGoodsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	LxtPaymentGoods struct {
		Id            uint64         `db:"id"`             // 主键ID
		Name          string         `db:"name"`           // 商品名称
		Desc          string         `db:"desc"`           // 商品描述
		Detail        sql.NullString `db:"detail"`         // 商品详情
		CategoryId    int64          `db:"category_id"`    // 商品分类ID
		Price         float64        `db:"price"`          // 商品价格
		OriginalPrice float64        `db:"original_price"` // 商品原价
		Rating        float64        `db:"rating"`         // 评分
		Sales         int64          `db:"sales"`          // 销量
		Download      int64          `db:"download"`       // 下载
		Size          int64          `db:"size"`           // 文件大小
		Status        int64          `db:"status"`         // 状态：0待发布；1已发布
		ProductCode   string         `db:"product_code"`   // 产品码
		PicUrl        sql.NullString `db:"pic_url"`        // 商品封面图片url
		Tags          sql.NullString `db:"tags"`           // 标签
		CreatedAt     time.Time      `db:"created_at"`     // 创建时间
		UpdatedAt     time.Time      `db:"updated_at"`     // 更新时间
		DeletedAt     sql.NullTime   `db:"deleted_at"`     // 删除时间
	}
)

func newLxtPaymentGoodsModel(conn sqlx.SqlConn) *defaultLxtPaymentGoodsModel {
	return &defaultLxtPaymentGoodsModel{
		conn:  conn,
		table: "`lxt_payment_goods`",
	}
}

func (m *defaultLxtPaymentGoodsModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultLxtPaymentGoodsModel) FindOne(ctx context.Context, id uint64) (*LxtPaymentGoods, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", lxtPaymentGoodsRows, m.table)
	var resp LxtPaymentGoods
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLxtPaymentGoodsModel) FindOneByCategoryId(ctx context.Context, categoryId int64) (*LxtPaymentGoods, error) {
	var resp LxtPaymentGoods
	query := fmt.Sprintf("select %s from %s where `category_id` = ? limit 1", lxtPaymentGoodsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, categoryId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLxtPaymentGoodsModel) Insert(ctx context.Context, data *LxtPaymentGoods) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, lxtPaymentGoodsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Desc, data.Detail, data.CategoryId, data.Price, data.OriginalPrice, data.Rating, data.Sales, data.Download, data.Size, data.Status, data.ProductCode, data.PicUrl, data.Tags, data.DeletedAt)
	return ret, err
}

func (m *defaultLxtPaymentGoodsModel) Update(ctx context.Context, newData *LxtPaymentGoods) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, lxtPaymentGoodsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Name, newData.Desc, newData.Detail, newData.CategoryId, newData.Price, newData.OriginalPrice, newData.Rating, newData.Sales, newData.Download, newData.Size, newData.Status, newData.ProductCode, newData.PicUrl, newData.Tags, newData.DeletedAt, newData.Id)
	return err
}

func (m *defaultLxtPaymentGoodsModel) tableName() string {
	return m.table
}
