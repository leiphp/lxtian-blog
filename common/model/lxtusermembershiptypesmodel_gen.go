// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	lxtUserMembershipTypesFieldNames          = builder.RawFieldNames(&LxtUserMembershipTypes{})
	lxtUserMembershipTypesRows                = strings.Join(lxtUserMembershipTypesFieldNames, ",")
	lxtUserMembershipTypesRowsExpectAutoSet   = strings.Join(stringx.Remove(lxtUserMembershipTypesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	lxtUserMembershipTypesRowsWithPlaceHolder = strings.Join(stringx.Remove(lxtUserMembershipTypesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	lxtUserMembershipTypesModel interface {
		Insert(ctx context.Context, data *LxtUserMembershipTypes) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*LxtUserMembershipTypes, error)
		FindOneByKey(ctx context.Context, key string) (*LxtUserMembershipTypes, error)
		Update(ctx context.Context, data *LxtUserMembershipTypes) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultLxtUserMembershipTypesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	LxtUserMembershipTypes struct {
		Id            uint64         `db:"id"`             // 主键ID
		Name          string         `db:"name"`           // 会员类型名称（月度会员、季度会员、年度会员）
		Key           string         `db:"key"`            // 会员类型标识（monthly, quarterly, yearly）
		Days          int64          `db:"days"`           // 会员天数
		Price         float64        `db:"price"`          // 价格
		OriginalPrice float64        `db:"original_price"` // 原价
		Discount      float64        `db:"discount"`       // 折扣价
		Period        string         `db:"period"`         // 单位
		Popular       int64          `db:"popular"`        // 是否推荐：0否1是
		Permissions   sql.NullString `db:"permissions"`    // 会员权限
		Description   sql.NullString `db:"description"`    // 会员描述
		Status        int64          `db:"status"`         // 状态：1启用0禁用
		CreatedAt     time.Time      `db:"created_at"`     // 创建时间
		UpdatedAt     time.Time      `db:"updated_at"`     // 更新时间
		DeletedAt     sql.NullTime   `db:"deleted_at"`     // 删除时间
	}
)

func newLxtUserMembershipTypesModel(conn sqlx.SqlConn) *defaultLxtUserMembershipTypesModel {
	return &defaultLxtUserMembershipTypesModel{
		conn:  conn,
		table: "`lxt_user_membership_types`",
	}
}

func (m *defaultLxtUserMembershipTypesModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultLxtUserMembershipTypesModel) FindOne(ctx context.Context, id uint64) (*LxtUserMembershipTypes, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", lxtUserMembershipTypesRows, m.table)
	var resp LxtUserMembershipTypes
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLxtUserMembershipTypesModel) FindOneByKey(ctx context.Context, key string) (*LxtUserMembershipTypes, error) {
	var resp LxtUserMembershipTypes
	query := fmt.Sprintf("select %s from %s where `key` = ? limit 1", lxtUserMembershipTypesRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, key)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLxtUserMembershipTypesModel) Insert(ctx context.Context, data *LxtUserMembershipTypes) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, lxtUserMembershipTypesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Key, data.Days, data.Price, data.OriginalPrice, data.Discount, data.Period, data.Popular, data.Permissions, data.Description, data.Status, data.DeletedAt)
	return ret, err
}

func (m *defaultLxtUserMembershipTypesModel) Update(ctx context.Context, newData *LxtUserMembershipTypes) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, lxtUserMembershipTypesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Name, newData.Key, newData.Days, newData.Price, newData.OriginalPrice, newData.Discount, newData.Period, newData.Popular, newData.Permissions, newData.Description, newData.Status, newData.DeletedAt, newData.Id)
	return err
}

func (m *defaultLxtUserMembershipTypesModel) tableName() string {
	return m.table
}
