// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	lxtUserMembershipsFieldNames          = builder.RawFieldNames(&LxtUserMemberships{})
	lxtUserMembershipsRows                = strings.Join(lxtUserMembershipsFieldNames, ",")
	lxtUserMembershipsRowsExpectAutoSet   = strings.Join(stringx.Remove(lxtUserMembershipsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	lxtUserMembershipsRowsWithPlaceHolder = strings.Join(stringx.Remove(lxtUserMembershipsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	lxtUserMembershipsModel interface {
		Insert(ctx context.Context, data *LxtUserMemberships) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*LxtUserMemberships, error)
		FindOneByUserId(ctx context.Context, userId uint64) (*LxtUserMemberships, error)
		Update(ctx context.Context, data *LxtUserMemberships) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultLxtUserMembershipsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	LxtUserMemberships struct {
		Id               uint64       `db:"id"`                 // 主键ID
		UserId           uint64       `db:"user_id"`            // 用户ID
		MembershipTypeId uint64       `db:"membership_type_id"` // 会员类型ID
		StartTime        time.Time    `db:"start_time"`         // 会员开始时间
		EndTime          time.Time    `db:"end_time"`           // 会员结束时间
		IsActive         int64        `db:"is_active"`          // 是否激活：1是0否
		TotalDays        int64        `db:"total_days"`         // 累计会员总天数（用于等级计算）
		Level            int64        `db:"level"`              // 当前等级
		CreatedAt        time.Time    `db:"created_at"`         // 创建时间
		UpdatedAt        time.Time    `db:"updated_at"`         // 更新时间
		DeletedAt        sql.NullTime `db:"deleted_at"`         // 删除时间
	}
)

func newLxtUserMembershipsModel(conn sqlx.SqlConn) *defaultLxtUserMembershipsModel {
	return &defaultLxtUserMembershipsModel{
		conn:  conn,
		table: "`lxt_user_memberships`",
	}
}

func (m *defaultLxtUserMembershipsModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultLxtUserMembershipsModel) FindOne(ctx context.Context, id uint64) (*LxtUserMemberships, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", lxtUserMembershipsRows, m.table)
	var resp LxtUserMemberships
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLxtUserMembershipsModel) FindOneByUserId(ctx context.Context, userId uint64) (*LxtUserMemberships, error) {
	var resp LxtUserMemberships
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", lxtUserMembershipsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLxtUserMembershipsModel) Insert(ctx context.Context, data *LxtUserMemberships) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, lxtUserMembershipsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.MembershipTypeId, data.StartTime, data.EndTime, data.IsActive, data.TotalDays, data.Level, data.DeletedAt)
	return ret, err
}

func (m *defaultLxtUserMembershipsModel) Update(ctx context.Context, newData *LxtUserMemberships) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, lxtUserMembershipsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.UserId, newData.MembershipTypeId, newData.StartTime, newData.EndTime, newData.IsActive, newData.TotalDays, newData.Level, newData.DeletedAt, newData.Id)
	return err
}

func (m *defaultLxtUserMembershipsModel) tableName() string {
	return m.table
}
