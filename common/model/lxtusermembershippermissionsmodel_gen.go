// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	lxtUserMembershipPermissionsFieldNames          = builder.RawFieldNames(&LxtUserMembershipPermissions{})
	lxtUserMembershipPermissionsRows                = strings.Join(lxtUserMembershipPermissionsFieldNames, ",")
	lxtUserMembershipPermissionsRowsExpectAutoSet   = strings.Join(stringx.Remove(lxtUserMembershipPermissionsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	lxtUserMembershipPermissionsRowsWithPlaceHolder = strings.Join(stringx.Remove(lxtUserMembershipPermissionsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	lxtUserMembershipPermissionsModel interface {
		Insert(ctx context.Context, data *LxtUserMembershipPermissions) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*LxtUserMembershipPermissions, error)
		Update(ctx context.Context, data *LxtUserMembershipPermissions) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultLxtUserMembershipPermissionsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	LxtUserMembershipPermissions struct {
		Id               uint64         `db:"id"`                 // 主键ID
		MembershipTypeId uint64         `db:"membership_type_id"` // 会员类型ID
		PermissionKey    string         `db:"permission_key"`     // 权限标识
		PermissionName   string         `db:"permission_name"`    // 权限名称
		PermissionDesc   sql.NullString `db:"permission_desc"`    // 权限描述
		CreatedAt        time.Time      `db:"created_at"`         // 创建时间
		UpdatedAt        time.Time      `db:"updated_at"`         // 更新时间
		DeletedAt        sql.NullTime   `db:"deleted_at"`         // 删除时间
	}
)

func newLxtUserMembershipPermissionsModel(conn sqlx.SqlConn) *defaultLxtUserMembershipPermissionsModel {
	return &defaultLxtUserMembershipPermissionsModel{
		conn:  conn,
		table: "`lxt_user_membership_permissions`",
	}
}

func (m *defaultLxtUserMembershipPermissionsModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultLxtUserMembershipPermissionsModel) FindOne(ctx context.Context, id uint64) (*LxtUserMembershipPermissions, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", lxtUserMembershipPermissionsRows, m.table)
	var resp LxtUserMembershipPermissions
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLxtUserMembershipPermissionsModel) Insert(ctx context.Context, data *LxtUserMembershipPermissions) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, lxtUserMembershipPermissionsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.MembershipTypeId, data.PermissionKey, data.PermissionName, data.PermissionDesc, data.DeletedAt)
	return ret, err
}

func (m *defaultLxtUserMembershipPermissionsModel) Update(ctx context.Context, data *LxtUserMembershipPermissions) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, lxtUserMembershipPermissionsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.MembershipTypeId, data.PermissionKey, data.PermissionName, data.PermissionDesc, data.DeletedAt, data.Id)
	return err
}

func (m *defaultLxtUserMembershipPermissionsModel) tableName() string {
	return m.table
}
