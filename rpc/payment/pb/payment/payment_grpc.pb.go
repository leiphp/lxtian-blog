// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: payment.proto

package payment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Payment_CreatePayment_FullMethodName  = "/payment.Payment/CreatePayment"
	Payment_RepayOrder_FullMethodName     = "/payment.Payment/RepayOrder"
	Payment_QueryPayment_FullMethodName   = "/payment.Payment/QueryPayment"
	Payment_RefundPayment_FullMethodName  = "/payment.Payment/RefundPayment"
	Payment_PaymentHistory_FullMethodName = "/payment.Payment/PaymentHistory"
	Payment_PaymentNotify_FullMethodName  = "/payment.Payment/PaymentNotify"
	Payment_ClosePayment_FullMethodName   = "/payment.Payment/ClosePayment"
	Payment_CancelPayment_FullMethodName  = "/payment.Payment/CancelPayment"
)

// PaymentClient is the client API for Payment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentClient interface {
	// 创建支付订单
	CreatePayment(ctx context.Context, in *CreatePaymentReq, opts ...grpc.CallOption) (*CreatePaymentResp, error)
	// 重新支付订单
	RepayOrder(ctx context.Context, in *RepayOrderReq, opts ...grpc.CallOption) (*RepayOrderResp, error)
	// 查询支付结果
	QueryPayment(ctx context.Context, in *QueryPaymentReq, opts ...grpc.CallOption) (*QueryPaymentResp, error)
	// 申请退款
	RefundPayment(ctx context.Context, in *RefundPaymentReq, opts ...grpc.CallOption) (*RefundPaymentResp, error)
	// 支付记录查询
	PaymentHistory(ctx context.Context, in *PaymentHistoryReq, opts ...grpc.CallOption) (*PaymentHistoryResp, error)
	// 支付回调通知处理
	PaymentNotify(ctx context.Context, in *PaymentNotifyReq, opts ...grpc.CallOption) (*PaymentNotifyResp, error)
	// 关闭支付订单
	ClosePayment(ctx context.Context, in *ClosePaymentReq, opts ...grpc.CallOption) (*ClosePaymentResp, error)
	// 取消支付订单
	CancelPayment(ctx context.Context, in *CancelPaymentReq, opts ...grpc.CallOption) (*CancelPaymentResp, error)
}

type paymentClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentClient(cc grpc.ClientConnInterface) PaymentClient {
	return &paymentClient{cc}
}

func (c *paymentClient) CreatePayment(ctx context.Context, in *CreatePaymentReq, opts ...grpc.CallOption) (*CreatePaymentResp, error) {
	out := new(CreatePaymentResp)
	err := c.cc.Invoke(ctx, Payment_CreatePayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) RepayOrder(ctx context.Context, in *RepayOrderReq, opts ...grpc.CallOption) (*RepayOrderResp, error) {
	out := new(RepayOrderResp)
	err := c.cc.Invoke(ctx, Payment_RepayOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) QueryPayment(ctx context.Context, in *QueryPaymentReq, opts ...grpc.CallOption) (*QueryPaymentResp, error) {
	out := new(QueryPaymentResp)
	err := c.cc.Invoke(ctx, Payment_QueryPayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) RefundPayment(ctx context.Context, in *RefundPaymentReq, opts ...grpc.CallOption) (*RefundPaymentResp, error) {
	out := new(RefundPaymentResp)
	err := c.cc.Invoke(ctx, Payment_RefundPayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) PaymentHistory(ctx context.Context, in *PaymentHistoryReq, opts ...grpc.CallOption) (*PaymentHistoryResp, error) {
	out := new(PaymentHistoryResp)
	err := c.cc.Invoke(ctx, Payment_PaymentHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) PaymentNotify(ctx context.Context, in *PaymentNotifyReq, opts ...grpc.CallOption) (*PaymentNotifyResp, error) {
	out := new(PaymentNotifyResp)
	err := c.cc.Invoke(ctx, Payment_PaymentNotify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) ClosePayment(ctx context.Context, in *ClosePaymentReq, opts ...grpc.CallOption) (*ClosePaymentResp, error) {
	out := new(ClosePaymentResp)
	err := c.cc.Invoke(ctx, Payment_ClosePayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) CancelPayment(ctx context.Context, in *CancelPaymentReq, opts ...grpc.CallOption) (*CancelPaymentResp, error) {
	out := new(CancelPaymentResp)
	err := c.cc.Invoke(ctx, Payment_CancelPayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServer is the server API for Payment service.
// All implementations must embed UnimplementedPaymentServer
// for forward compatibility
type PaymentServer interface {
	// 创建支付订单
	CreatePayment(context.Context, *CreatePaymentReq) (*CreatePaymentResp, error)
	// 重新支付订单
	RepayOrder(context.Context, *RepayOrderReq) (*RepayOrderResp, error)
	// 查询支付结果
	QueryPayment(context.Context, *QueryPaymentReq) (*QueryPaymentResp, error)
	// 申请退款
	RefundPayment(context.Context, *RefundPaymentReq) (*RefundPaymentResp, error)
	// 支付记录查询
	PaymentHistory(context.Context, *PaymentHistoryReq) (*PaymentHistoryResp, error)
	// 支付回调通知处理
	PaymentNotify(context.Context, *PaymentNotifyReq) (*PaymentNotifyResp, error)
	// 关闭支付订单
	ClosePayment(context.Context, *ClosePaymentReq) (*ClosePaymentResp, error)
	// 取消支付订单
	CancelPayment(context.Context, *CancelPaymentReq) (*CancelPaymentResp, error)
	mustEmbedUnimplementedPaymentServer()
}

// UnimplementedPaymentServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentServer struct {
}

func (UnimplementedPaymentServer) CreatePayment(context.Context, *CreatePaymentReq) (*CreatePaymentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayment not implemented")
}
func (UnimplementedPaymentServer) RepayOrder(context.Context, *RepayOrderReq) (*RepayOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepayOrder not implemented")
}
func (UnimplementedPaymentServer) QueryPayment(context.Context, *QueryPaymentReq) (*QueryPaymentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPayment not implemented")
}
func (UnimplementedPaymentServer) RefundPayment(context.Context, *RefundPaymentReq) (*RefundPaymentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundPayment not implemented")
}
func (UnimplementedPaymentServer) PaymentHistory(context.Context, *PaymentHistoryReq) (*PaymentHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentHistory not implemented")
}
func (UnimplementedPaymentServer) PaymentNotify(context.Context, *PaymentNotifyReq) (*PaymentNotifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentNotify not implemented")
}
func (UnimplementedPaymentServer) ClosePayment(context.Context, *ClosePaymentReq) (*ClosePaymentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClosePayment not implemented")
}
func (UnimplementedPaymentServer) CancelPayment(context.Context, *CancelPaymentReq) (*CancelPaymentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPayment not implemented")
}
func (UnimplementedPaymentServer) mustEmbedUnimplementedPaymentServer() {}

// UnsafePaymentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServer will
// result in compilation errors.
type UnsafePaymentServer interface {
	mustEmbedUnimplementedPaymentServer()
}

func RegisterPaymentServer(s grpc.ServiceRegistrar, srv PaymentServer) {
	s.RegisterService(&Payment_ServiceDesc, srv)
}

func _Payment_CreatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).CreatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_CreatePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).CreatePayment(ctx, req.(*CreatePaymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_RepayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepayOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).RepayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_RepayOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).RepayOrder(ctx, req.(*RepayOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_QueryPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPaymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).QueryPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_QueryPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).QueryPayment(ctx, req.(*QueryPaymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_RefundPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundPaymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).RefundPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_RefundPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).RefundPayment(ctx, req.(*RefundPaymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_PaymentHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).PaymentHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_PaymentHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).PaymentHistory(ctx, req.(*PaymentHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_PaymentNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentNotifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).PaymentNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_PaymentNotify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).PaymentNotify(ctx, req.(*PaymentNotifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_ClosePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClosePaymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).ClosePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_ClosePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).ClosePayment(ctx, req.(*ClosePaymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_CancelPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPaymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).CancelPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_CancelPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).CancelPayment(ctx, req.(*CancelPaymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Payment_ServiceDesc is the grpc.ServiceDesc for Payment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Payment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.Payment",
	HandlerType: (*PaymentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePayment",
			Handler:    _Payment_CreatePayment_Handler,
		},
		{
			MethodName: "RepayOrder",
			Handler:    _Payment_RepayOrder_Handler,
		},
		{
			MethodName: "QueryPayment",
			Handler:    _Payment_QueryPayment_Handler,
		},
		{
			MethodName: "RefundPayment",
			Handler:    _Payment_RefundPayment_Handler,
		},
		{
			MethodName: "PaymentHistory",
			Handler:    _Payment_PaymentHistory_Handler,
		},
		{
			MethodName: "PaymentNotify",
			Handler:    _Payment_PaymentNotify_Handler,
		},
		{
			MethodName: "ClosePayment",
			Handler:    _Payment_ClosePayment_Handler,
		},
		{
			MethodName: "CancelPayment",
			Handler:    _Payment_CancelPayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment.proto",
}
