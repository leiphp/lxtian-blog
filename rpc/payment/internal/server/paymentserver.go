// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2
// Source: payment.proto

package server

import (
	"context"

	"lxtian-blog/rpc/payment/internal/logic"
	"lxtian-blog/rpc/payment/internal/svc"
	"lxtian-blog/rpc/payment/pb/payment"
)

type PaymentServer struct {
	svcCtx *svc.ServiceContext
	payment.UnimplementedPaymentServer
}

func NewPaymentServer(svcCtx *svc.ServiceContext) *PaymentServer {
	return &PaymentServer{
		svcCtx: svcCtx,
	}
}

// 创建支付订单
func (s *PaymentServer) CreatePayment(ctx context.Context, in *payment.CreatePaymentReq) (*payment.CreatePaymentResp, error) {
	l := logic.NewCreatePaymentLogic(ctx, s.svcCtx)
	return l.CreatePayment(in)
}

// 查询支付结果
func (s *PaymentServer) QueryPayment(ctx context.Context, in *payment.QueryPaymentReq) (*payment.QueryPaymentResp, error) {
	l := logic.NewQueryPaymentLogic(ctx, s.svcCtx)
	return l.QueryPayment(in)
}

// 申请退款
func (s *PaymentServer) RefundPayment(ctx context.Context, in *payment.RefundPaymentReq) (*payment.RefundPaymentResp, error) {
	l := logic.NewRefundPaymentLogic(ctx, s.svcCtx)
	return l.RefundPayment(in)
}

// 支付记录查询
func (s *PaymentServer) PaymentHistory(ctx context.Context, in *payment.PaymentHistoryReq) (*payment.PaymentHistoryResp, error) {
	l := logic.NewPaymentHistoryLogic(ctx, s.svcCtx)
	return l.PaymentHistory(in)
}

// 支付回调通知处理
func (s *PaymentServer) PaymentNotify(ctx context.Context, in *payment.PaymentNotifyReq) (*payment.PaymentNotifyResp, error) {
	l := logic.NewPaymentNotifyLogic(ctx, s.svcCtx)
	return l.PaymentNotify(in)
}

// 关闭支付订单
func (s *PaymentServer) ClosePayment(ctx context.Context, in *payment.ClosePaymentReq) (*payment.ClosePaymentResp, error) {
	l := logic.NewClosePaymentLogic(ctx, s.svcCtx)
	return l.ClosePayment(in)
}

// 取消支付订单
func (s *PaymentServer) CancelPayment(ctx context.Context, in *payment.CancelPaymentReq) (*payment.CancelPaymentResp, error) {
	l := logic.NewCancelPaymentLogic(ctx, s.svcCtx)
	return l.CancelPayment(in)
}
