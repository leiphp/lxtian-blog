// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2
// Source: payment.proto

package paymentclient

import (
	"context"

	"lxtian-blog/rpc/payment/pb/payment"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CancelPaymentReq   = payment.CancelPaymentReq
	CancelPaymentResp  = payment.CancelPaymentResp
	ClosePaymentReq    = payment.ClosePaymentReq
	ClosePaymentResp   = payment.ClosePaymentResp
	CreatePaymentReq   = payment.CreatePaymentReq
	CreatePaymentResp  = payment.CreatePaymentResp
	PaymentHistoryReq  = payment.PaymentHistoryReq
	PaymentHistoryResp = payment.PaymentHistoryResp
	PaymentNotifyReq   = payment.PaymentNotifyReq
	PaymentNotifyResp  = payment.PaymentNotifyResp
	QueryPaymentReq    = payment.QueryPaymentReq
	QueryPaymentResp   = payment.QueryPaymentResp
	RefundPaymentReq   = payment.RefundPaymentReq
	RefundPaymentResp  = payment.RefundPaymentResp
	RepayOrderReq      = payment.RepayOrderReq
	RepayOrderResp     = payment.RepayOrderResp

	Payment interface {
		// 创建支付订单
		CreatePayment(ctx context.Context, in *CreatePaymentReq, opts ...grpc.CallOption) (*CreatePaymentResp, error)
		// 重新支付订单
		RepayOrder(ctx context.Context, in *RepayOrderReq, opts ...grpc.CallOption) (*RepayOrderResp, error)
		// 查询支付结果
		QueryPayment(ctx context.Context, in *QueryPaymentReq, opts ...grpc.CallOption) (*QueryPaymentResp, error)
		// 申请退款
		RefundPayment(ctx context.Context, in *RefundPaymentReq, opts ...grpc.CallOption) (*RefundPaymentResp, error)
		// 支付记录查询
		PaymentHistory(ctx context.Context, in *PaymentHistoryReq, opts ...grpc.CallOption) (*PaymentHistoryResp, error)
		// 支付回调通知处理
		PaymentNotify(ctx context.Context, in *PaymentNotifyReq, opts ...grpc.CallOption) (*PaymentNotifyResp, error)
		// 关闭支付订单
		ClosePayment(ctx context.Context, in *ClosePaymentReq, opts ...grpc.CallOption) (*ClosePaymentResp, error)
		// 取消支付订单
		CancelPayment(ctx context.Context, in *CancelPaymentReq, opts ...grpc.CallOption) (*CancelPaymentResp, error)
	}

	defaultPayment struct {
		cli zrpc.Client
	}
)

func NewPayment(cli zrpc.Client) Payment {
	return &defaultPayment{
		cli: cli,
	}
}

// 创建支付订单
func (m *defaultPayment) CreatePayment(ctx context.Context, in *CreatePaymentReq, opts ...grpc.CallOption) (*CreatePaymentResp, error) {
	client := payment.NewPaymentClient(m.cli.Conn())
	return client.CreatePayment(ctx, in, opts...)
}

// 重新支付订单
func (m *defaultPayment) RepayOrder(ctx context.Context, in *RepayOrderReq, opts ...grpc.CallOption) (*RepayOrderResp, error) {
	client := payment.NewPaymentClient(m.cli.Conn())
	return client.RepayOrder(ctx, in, opts...)
}

// 查询支付结果
func (m *defaultPayment) QueryPayment(ctx context.Context, in *QueryPaymentReq, opts ...grpc.CallOption) (*QueryPaymentResp, error) {
	client := payment.NewPaymentClient(m.cli.Conn())
	return client.QueryPayment(ctx, in, opts...)
}

// 申请退款
func (m *defaultPayment) RefundPayment(ctx context.Context, in *RefundPaymentReq, opts ...grpc.CallOption) (*RefundPaymentResp, error) {
	client := payment.NewPaymentClient(m.cli.Conn())
	return client.RefundPayment(ctx, in, opts...)
}

// 支付记录查询
func (m *defaultPayment) PaymentHistory(ctx context.Context, in *PaymentHistoryReq, opts ...grpc.CallOption) (*PaymentHistoryResp, error) {
	client := payment.NewPaymentClient(m.cli.Conn())
	return client.PaymentHistory(ctx, in, opts...)
}

// 支付回调通知处理
func (m *defaultPayment) PaymentNotify(ctx context.Context, in *PaymentNotifyReq, opts ...grpc.CallOption) (*PaymentNotifyResp, error) {
	client := payment.NewPaymentClient(m.cli.Conn())
	return client.PaymentNotify(ctx, in, opts...)
}

// 关闭支付订单
func (m *defaultPayment) ClosePayment(ctx context.Context, in *ClosePaymentReq, opts ...grpc.CallOption) (*ClosePaymentResp, error) {
	client := payment.NewPaymentClient(m.cli.Conn())
	return client.ClosePayment(ctx, in, opts...)
}

// 取消支付订单
func (m *defaultPayment) CancelPayment(ctx context.Context, in *CancelPaymentReq, opts ...grpc.CallOption) (*CancelPaymentResp, error) {
	client := payment.NewPaymentClient(m.cli.Conn())
	return client.CancelPayment(ctx, in, opts...)
}
