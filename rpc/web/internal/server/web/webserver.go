// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2
// Source: web.proto

package server

import (
	"context"

	"lxtian-blog/rpc/web/internal/logic/web"
	"lxtian-blog/rpc/web/internal/svc"
	"lxtian-blog/rpc/web/web"
)

type WebServer struct {
	svcCtx *svc.ServiceContext
	web.UnimplementedWebServer
}

func NewWebServer(svcCtx *svc.ServiceContext) *WebServer {
	return &WebServer{
		svcCtx: svcCtx,
	}
}

func (s *WebServer) ArticleList(ctx context.Context, in *web.ArticleListReq) (*web.ArticleListResp, error) {
	l := weblogic.NewArticleListLogic(ctx, s.svcCtx)
	return l.ArticleList(in)
}

func (s *WebServer) Article(ctx context.Context, in *web.ArticleReq) (*web.ArticleResp, error) {
	l := weblogic.NewArticleLogic(ctx, s.svcCtx)
	return l.Article(in)
}

func (s *WebServer) ArticleLike(ctx context.Context, in *web.ArticleLikeReq) (*web.ArticleLikeResp, error) {
	l := weblogic.NewArticleLikeLogic(ctx, s.svcCtx)
	return l.ArticleLike(in)
}

func (s *WebServer) CategoryList(ctx context.Context, in *web.CategoryListReq) (*web.CategoryListResp, error) {
	l := weblogic.NewCategoryListLogic(ctx, s.svcCtx)
	return l.CategoryList(in)
}

func (s *WebServer) ChatList(ctx context.Context, in *web.ChatListReq) (*web.ChatListResp, error) {
	l := weblogic.NewChatListLogic(ctx, s.svcCtx)
	return l.ChatList(in)
}

func (s *WebServer) CommentList(ctx context.Context, in *web.CommentListReq) (*web.CommentListResp, error) {
	l := weblogic.NewCommentListLogic(ctx, s.svcCtx)
	return l.CommentList(in)
}

func (s *WebServer) OrderList(ctx context.Context, in *web.OrderListReq) (*web.OrderListResp, error) {
	l := weblogic.NewOrderListLogic(ctx, s.svcCtx)
	return l.OrderList(in)
}

func (s *WebServer) TagsList(ctx context.Context, in *web.TagsListReq) (*web.TagsListResp, error) {
	l := weblogic.NewTagsListLogic(ctx, s.svcCtx)
	return l.TagsList(in)
}

func (s *WebServer) ColumnList(ctx context.Context, in *web.ColumnListReq) (*web.ColumnListResp, error) {
	l := weblogic.NewColumnListLogic(ctx, s.svcCtx)
	return l.ColumnList(in)
}

func (s *WebServer) BookList(ctx context.Context, in *web.BookListReq) (*web.BookListResp, error) {
	l := weblogic.NewBookListLogic(ctx, s.svcCtx)
	return l.BookList(in)
}

func (s *WebServer) Book(ctx context.Context, in *web.BookReq) (*web.BookResp, error) {
	l := weblogic.NewBookLogic(ctx, s.svcCtx)
	return l.Book(in)
}

func (s *WebServer) BookChapter(ctx context.Context, in *web.BookChapterReq) (*web.BookChapterResp, error) {
	l := weblogic.NewBookChapterLogic(ctx, s.svcCtx)
	return l.BookChapter(in)
}
